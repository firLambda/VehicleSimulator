
超でかいリストを宣言するためメモリを大量に消費するため気を付けてください（2GBくらい）

このシミュレータは7つのプログラムの構成になってます
sim.py
cal.py
accl.py
idm.py
generate.py
save.py
filereader.py

それぞれの役割は以下の様になっています
sim.py
シミュレータの核となるプログラムでこれを実行することでシミュレーションが開始されます．
ここではシミュレーションの条件を決める変数が多く
交通量や加速車線の始点・終点，合流に協力する車両の割合，seed値，シミュレーションの時間，制御の有無など決めることができます．

cal.py
ここではsim.pyで渡された引数をもとにループを回して車両の位置や速度などを計算するプログラムになっています．
ここでのシミュレーションの0.1[s]ごとで速度の単位は[m/s]になります．時速に直すときは3.6を掛けることで時速に直せるのでプログラム中で数値にに3.6が(積or除)されている場合は単位を変換していると思ってください．
次に車両の情報を保持しているリストがcarやcar_infoになります．carは3次元リストで[時間][ID][要素or状態]が保持されています．car_infoはその車両の持つ固有の値になります．
車線変更や合流時に協力するかなどの情報が保持されています．
ここからいろいろな関数を呼び出しています．

accl.py
加速度を計算する関数です．
車の制御はここで加速度を変化させることで決定しています．
まず，初めにそのままの前方車両との加速度を計算した後，制御した場合の加速度を計算を行う．
車線変更中や前方に車両が車線変更を行ってきた場合の加速度の計算をします．
同時に複数の加速度を計算することがありますが基本的にぶつからないように加速度の計算結果が一番小さいものを採用するようにしています．

idm.py
idmの加速度を計算する関数．ほかにも車線変更の条件や希望車間距離を計算したり車線ごとにIDを並べたりする関数がある．
cal.pyとaccl．pyに呼び出される．

generate.py
車両を生成する際のタイムテーブルを生成したり車両固有の値であるcar_infoを初期化、設定していたりする．
また，走り切った車両や合流に失敗した車両を消去する役割もある．


save.py
logの出力を行うファイル
可視化やlog，合流車両情報など出力してくれる便利なやつ自分でほしいデータがあるときはここを変更する必要がある．
また，可視化やlogの出力は時間がかかるため必要な機能をを選ぶことが重要

filereader.py
最後に出力されたエクセルを読み取り各条件で合流に失敗した車両の割合をカウントしてくれるやつ
データをまとめるときには使えるが可視化やlogなどが含まれているデータの読み込みには時間がかかるため集計する時にだけ使いたいやつ

=================================================================================================
可視化の見方
まず，行は道路での位置を示している．1セル1メートルで進行方向は下なので下に行くほど進んでいることになる↓
列は時間と車線を表している．罫線で囲まれた範囲左から加速車線，走行車線，追越車線で1行目に書いてある数字が時間になる

セルに記入されているのは数字は【ID/速度[km/h]】である．
この位置は車両の先頭を表しておりこのプログラムでデフォルトの車両の長さはすべて5mなのでセルから上4マスが車両の長さになる．
仮にこの4マス以内に他の車両の先頭がある場合衝突していることになるためプログラムを見直す必要がある．








